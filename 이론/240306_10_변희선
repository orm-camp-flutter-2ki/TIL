* 객체지향 프로그래밍? (Object Oriented Programming)
객체들의 집합으로 프로그램의 /상호작용으로 진행하는 방식

모든 데이터를 객체로 취급하여, 객체가 처리 요청을 받았을 때, 객체 내부에 있는 기능을 가져와 사용해 처리하는 기법
모든 객체가 내부의 자료형과 함수로 구성된 프로그래밍 구조를 띔
장점
코드의 재사용이 가능하다 -> 유지보수가 쉽다
분석과 설계의 전환이 쉽다
단점
처리 속도가 상대적으로 느리다.
설계에 많은 시간이 든다

4가지 특성

추상화 : 공통된 속성에만 중점을 두어 모델화
캡슐화 : 데이터와 함수를 하나로 묶는 것
상속성 : 상위 부모 객체의 속성과 특징을 하위 객체가 물려받는 것
다형성 : 같은 함수가 있어도 매개변수에 따라 각자 다른 일을 하는 것

* 함수형 프로그래밍?(Functional Programming)
순수 함수를 조합하여 소프트웨어를 만드는 방식

순수 함수를 사용해, 상태를 제어하가보단, 빠르게 처리하는데 초점을 둔 방법
순수함수 :동일한 입력값을 넣으면 항상 동일한 리컨값을 변환하는 함수
실행 순서를 지정할 필요가 없어 비절차형 언어라고 함
장점
코드에서 프로그램의 실행에 영향을 미치는 영역과 순수한 영역을 최대한 분리한다
코드의 기독성이 높아지고, 유지보수가 좋아진다
태스트가 쉽다
단점
외부 데이터 혹은 내부 데이ㅓ의 상태를 조작할수 없다
